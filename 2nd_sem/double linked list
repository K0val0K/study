
#include <iostream>
#include<time.h>
using namespace std;

struct Tlist2 {
    int info;
    Tlist2* next = NULL;
    Tlist2* prev = NULL;
};

void addHead(Tlist2**, Tlist2**, int);
void addTail(Tlist2**, Tlist2**, int);
void readFromHead(Tlist2* head);
void readFromTail(Tlist2* tail);
Tlist2* findMax(Tlist2*, int&);
Tlist2* findMin(Tlist2*, int&);
void deleteBetween(Tlist2*, Tlist2*);
void delAll(Tlist2**);
Tlist2* find(Tlist2*, int&, int);
void kkk(Tlist2**, Tlist2**);

//сортировка слиянием
void split(Tlist2*, Tlist2**, Tlist2**);
Tlist2* merge(Tlist2*, Tlist2*);
void mergeSort(Tlist2**);
void moveTail(Tlist2**, Tlist2**);


int main()
{
    setlocale(LC_ALL, "Russian"); srand(time(NULL));
    int num, n;
    int option;
    bool flag = true;
    Tlist2* head1 = NULL, * tail1 = NULL;
    cout << "Введите количество добавляемых чисел: ";
    cin >> n;
    cout << "Заполнить список автоматически?\n1.Да\n2.Нет";
    cin >> option;
    while (flag) {
        switch (option) {
        case 1:
            for (int i = 0; i < n; i++) {
                num = rand() % 100 - 50;
                addHead(&head1, &tail1, num);
            } flag = false; break;
        case 2:
            cout << "Введите " << n << "чисел";
            for (int i = 0; i < n; i++) {
                cin >> num;
                addHead(&head1, &tail1, num);
            } flag = false; break;
        default: cout << "Ну, раз вы нажали неверно, заполним автоматически..."; option = 1; break;
        }
    }


    cout << "Полученный список\nПрочитан слева-направо: ";
    readFromHead(head1);
    cout << "Прочитан справо-налево: ";
    readFromTail(tail1);


    int maxidx = -1, minidx = -1;
    int key, position = 1;
    flag = true;
    while (flag) {
        cout << "Выберите действие\n1.Отсортировать список\n2.Удалить все элементы между максимальным и минимальным\n3.Найти позицию элемента в списке\n0 Выйти\n";
        cin >> option;
        switch (option) {
        case 1:
            mergeSort(&head1);
            moveTail(&head1, &tail1);
            cout << "Полученный список\nПрочитан слева-направо: ";
            readFromHead(head1);
            cout << "Прочитан справо-налево: ";
            readFromTail(tail1);
            break;

        case 2:
            Tlist2 * maxpointer, * minpointer;
            maxpointer = findMax(head1, maxidx);
            minpointer = findMin(head1, minidx);
            if (maxidx < minidx) {
                deleteBetween(maxpointer, minpointer);
            }
            else if (maxidx > minidx) {
                deleteBetween(minpointer, maxpointer);
            }

            readFromHead(head1);

            break;


        case 3:
            cout << "Введите ключ ";
            cin >> key;
            if (find(head1, position, key)) cout << "Первое вхождение ключа находится на " << position << " позиции" << endl;
            else cout << "Ключ не найден" << endl;
            break;
        case 0: delAll(&head1); flag = false; break;
        default: cout << "Выберите верную опцию!!!";
        }
    }
    return 0;
}

void addHead(Tlist2** head, Tlist2** tail, int num) {
    Tlist2* temp = new Tlist2;
    temp->info = num;
    temp->next = NULL;
    if (*tail == NULL) {
        *tail = *head = temp;
        temp->prev = NULL;
    }
    else {
        temp->prev = *head;
        (temp->prev)->next = temp;
        *head = temp;
    }
}

void addTail(Tlist2** head, Tlist2** tail, int num) {
    Tlist2* temp = new Tlist2;
    temp->info = num;
    temp->prev = NULL;
    if (*head == NULL) {
        *tail = *head = temp;
        temp->next = NULL;
    }
    else {
        temp->next = *tail;
        (temp->next)->prev = temp;
        *tail = temp;
    }
}

void readFromHead(Tlist2* head) {
    if (head == NULL) return;
    Tlist2* temp = head;
    while (temp != NULL) {
        cout << temp->info << " ";
        temp = temp->prev;
    }
    cout << endl;
    return;
}

void readFromTail(Tlist2* tail) {
    if (tail == NULL) return;
    Tlist2* temp = tail;

    while (temp != NULL) {
        cout << temp->info << " ";
        temp = temp->next;
    }
    cout << endl;
    return;
}

Tlist2* findMax(Tlist2* head, int& maxidx) {
    if (head == NULL) return NULL;
    int max = head->info, counter = 1;
    maxidx = 1;
    Tlist2* temp, * maxpointer;
    temp = maxpointer = head;
    while (temp != NULL) {
        if (temp->info > max) {
            max = temp->info;
            maxpointer = temp;
            maxidx = counter;
        }
        counter++;
        temp = temp->prev;
    }
    return maxpointer;
}

Tlist2* findMin(Tlist2* head, int& minidx) {
    if (head == NULL) return NULL;
    int min = head->info, counter = 1;
    minidx = 1;
    Tlist2* temp, * minpointer;
    temp = minpointer = head;
    while (temp != NULL) {
        if (temp->info < min) {
            min = temp->info;
            minpointer = temp;
            minidx = counter;
        }
        counter++;
        temp = temp->prev;
    }
    return minpointer;
}

void deleteBetween(Tlist2* left, Tlist2* right) {
    if (left->prev == right) return;
    Tlist2* temp;
    temp = left->prev;
    left->prev = right;
    (right->next)->prev = NULL;
    right->next = left;
    delAll(&temp);
}

void delAll(Tlist2** head) {
    Tlist2* temp;
    while (*head != NULL) {
        temp = *head;
        *head = (*head)->prev;
        delete temp;
    }
}

Tlist2* find(Tlist2* head, int& position, int key) {
    Tlist2* temp = head;
    position = 1;
    while (temp != NULL) {
        if (temp->info == key) return temp;
        temp = temp->prev;
        position++;
    }
    return NULL;
}
/////////////////////////////////////////////////////////////////////////////////////////////// сортировка слиянием 
void split(Tlist2* head, Tlist2** a, Tlist2** b) {
    Tlist2* slow = head;
    Tlist2* fast = head->prev;
    while (fast != NULL) {
        fast = fast->prev;
        if (fast != NULL) {
            slow = slow->prev;
            fast = fast->prev;
        }
    }
    *b = slow->prev;
    slow->prev = NULL;
}

Tlist2* merge(Tlist2* a, Tlist2* b) {
    if (a == NULL) return b;
    if (b == NULL) return a;

    if (a->info <= b->info) {
        a->prev = merge(a->prev, b);
        a->prev->next = a;
        a->next = NULL;
        return a;
    }
    else {
        b->prev = merge(a, b->prev);
        b->prev->next = b;
        b->next = NULL;
        return b;
    }
}

void mergeSort(Tlist2** head) {
    if (*head == NULL || (*head)->prev == NULL) return;
    Tlist2* a = *head, * b = NULL;
    split(*head, &a, &b);
    mergeSort(&a);
    mergeSort(&b);
    *head = merge(a, b);
}

void moveTail(Tlist2** head, Tlist2** tail) {
    Tlist2* temp = *head;
    while (temp != NULL) {
        if (temp->prev == NULL) *tail = temp;
        temp = temp->prev;
    }
    return;
}
